<!-- Scripts for UI components -->
<script async defer>
	document.addEventListener('astro:page-load', () => {
		// Menu Dropdown
		const menuItems = document.querySelectorAll('.header__menu-item')
		const headerToggle = document.querySelector('.header__toggle')
		const headerMenu = document.querySelector('.header__menu')

		menuItems.forEach((menuItem) => {
			const submenu = menuItem.querySelector('.header__submenu')
			const link = menuItem.querySelector('.header__menu-link')

			if (submenu && link) {
				link.addEventListener('click', function (event) {
					event.preventDefault()
					menuItem.classList.toggle('open')
				})
			} else if (link) {
				// For menu items without submenus, close the mobile menu when clicked
				link.addEventListener('click', function (event) {
					// Close mobile menu
					if (headerToggle && headerMenu) {
						headerToggle.classList.remove('header__toggle--open')
						headerToggle.setAttribute('aria-expanded', 'false')
						headerMenu.classList.remove('header__menu--open')
					}
					// Close any open submenus
					menuItems.forEach((item) => {
						item.classList.remove('open')
					})
				})
			}
		})

		document.addEventListener('click', function (event) {
			const target = event.target

			menuItems.forEach((menuItem) => {
				const submenu = menuItem.querySelector('.header__submenu')
				if (submenu && !menuItem.contains(target)) {
					menuItem.classList.remove('open')
				}
			})
		})

		// Menu toggle
		if (headerToggle && headerMenu) {
			headerToggle.addEventListener('click', () => {
				headerToggle.classList.toggle('header__toggle--open')
				const isExpanded = headerToggle.getAttribute('aria-expanded') === 'true'
				const newExpandedValue = isExpanded ? 'false' : 'true'
				headerToggle.setAttribute('aria-expanded', newExpandedValue)
				headerMenu.classList.toggle('header__menu--open')
			})
		}

		// Modals
		function openModal(modal) {
			if (modal && modal.classList.contains('modal')) {
				modal.classList.add('open')
			}
		}
		function closeModal(modal) {
			if (modal && modal.classList.contains('modal')) {
				modal.classList.remove('open')
			}
		}
		const modalButtons = document.querySelectorAll('[data-modal]')

		modalButtons.forEach(function (button) {
			button.addEventListener('click', function () {
				const modalId = button.getAttribute('data-modal')
				const modal = document.getElementById(modalId)
				openModal(modal)
			})
		})
		document.querySelectorAll('.modal').forEach(function (modal) {
			modal.addEventListener('click', function (event) {
				if (event.target === modal) {
					closeModal(modal)
				}
			})
			const close = modal.querySelector('.modal__close')
			if (close) {
				close.addEventListener('click', function (event) {
					event.stopPropagation()
					closeModal(modal)
				})
			}
		})

		// Header/Footer visibility control (mobile only)
		const setupHeaderFooterBehavior = () => {
			const header = document.querySelector('.header') // Adjust selector if needed
			const footer = document.querySelector('.footer') // Adjust selector if needed
			
			if (!header || !footer) return
			
			// Add transition to header
			header.style.transition = 'transform 0.3s ease-in-out'
			
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (window.innerWidth <= 768) { // Only on mobile/tablet
						if (entry.isIntersecting) {
							// Footer is visible - hide header
							header.style.transform = 'translateY(-100%)'
						} else {
							// Footer is not visible - show header
							header.style.transform = 'translateY(0)'
						}
					}
				})
			}, {
				threshold: 0.1, // Trigger when 10% of footer is visible
				rootMargin: '0px'
			})
			
			observer.observe(footer)
			
			// Reset on window resize
			const handleResize = () => {
				if (window.innerWidth > 768) {
					header.style.transform = 'translateY(0)'
				}
			}
			
			window.addEventListener('resize', handleResize)
		}

		// Initialize header/footer behavior
		setupHeaderFooterBehavior()
	})
</script>

<!-- Scroll animations -->
<script>
	const initializeObserver = () => {
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add('scroll-animated')
				}
			})
		})

		const elements = document.querySelectorAll('.scroll-animation .col')

		elements.forEach((element) => {
			observer.observe(element)
		})
	}

	document.addEventListener('DOMContentLoaded', () => {
		initializeObserver()
	})

	document.addEventListener('astro:page-loaded', () => {
		initializeObserver()
	})

	document.addEventListener('astro:after-swap', () => {
		initializeObserver()
	})
</script>

<!-- Light/Dark mode  -->
<script>
	if (document.documentElement.classList.contains('mode-auto')) {
		const applyTheme = () => {
			if (
				localStorage.theme === 'dark' ||
				(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
			) {
				document.documentElement.classList.add('dark')
			} else {
				document.documentElement.classList.remove('dark')
			}
		}
		const setupThemeSwitcher = () => {
			const themeSwitcher = document.getElementById('theme-selector')
			if (themeSwitcher) {
				themeSwitcher.addEventListener('click', () => {
					if (localStorage.theme === 'dark') {
						localStorage.theme = 'light'
						document.documentElement.classList.remove('dark')
					} else {
						localStorage.theme = 'dark'
						document.documentElement.classList.add('dark')
					}
				})
			}
		}
		document.addEventListener('DOMContentLoaded', () => {
			applyTheme()
			setupThemeSwitcher()
		})
		document.addEventListener('astro:page-loaded', () => {
			applyTheme()
			setupThemeSwitcher()
		})
		document.addEventListener('astro:after-swap', () => {
			applyTheme()
			setupThemeSwitcher()
		})
	} else if (document.documentElement.classList.contains('mode-dark')) {
		document.documentElement.classList.add('dark')
	} else if (document.documentElement.classList.contains('mode-light')) {
		document.documentElement.classList.remove('dark')
	}
</script>